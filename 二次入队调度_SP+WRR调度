测试步骤：
1、按照组网图建立拓扑结构 2、配置通用调度器0下挂的队列0属于组0，队列1,2,3属于同一个组1，队列4属于组2，队列1,2,3为wrr调度,调度比例为1:2:1；通用调度器7下挂的队列0-2为WRR调度，调度比例为1:2:4 3、配置转发模块，使数据报文进入以上8条队列后，二次入队分别进入8个tcont的任意一个队列 4、配置通用调度器0的shaper为300M，通用调度器7的shaper为100M 5、往队列0~7各发100M的流量，观测tcont0~7收到的流量 6、动态修改通用调度器7下挂的0-2队列的调度比例为1:8:32；观察tcont0-tcont7收到的流量 7、在步骤5的基础上，修改队列2的流量为50M；观察tcont0-tcont7收到的流量

样本点：
报文长度：64 2000 随机 覆盖以下两种场景： 1）所有队列的流量大于WRR分配的带宽； 2）部分队列的流量大于WRR分配的带宽、部分队列的流量小于WRR分配的带宽。

预期结果
1、步骤5，tcont0收到的流量为100M；tcont1，tcont2，tcont3收到的总流量为200M，pps比例符合1:2:1；tcont4收不到流量；tcont5,tcont6,tcont7收到的总流量为100M，pps比例符合1:2:4 2、步骤6，tcont5,tcont6,tcont7收到的总流量为100M，pps比例符合1:8:32；其他流量预期与步骤5一致 3、步骤7，tcont1,tcont2,tcont3收到的总流量为200M，tcont1和tcont3的pps比例符合1:1；其他流量预期与步骤5一致

.app.tcl同'shaper'

.cfg(参数配置文件)
[TestLogicInfo]
testClusterNames= IasGlobal/AsicQOSTc
productLib=
toolLib=

# 在TERM1控制台窗口上的建立/恢复配置命令/脚本 
TERM1,SetupCommands=
TERM1,RestoreCommands=
TERM1,SetupScripts=

[TestCaseData]
FIELDS,      testCaseNo,        testClusters,      testCaseName,      	testCaseLevel,			args,    
1, QOS_Schedule_04_010,  IasGlobal/AsicQOSTc, 二次入队_调度_SP+WRR 部分流拥塞, $chipVersionQosS_H_L$execNetWorkQos0$caseLevel0, \
-egr $up_port_num -adj 16 \
-vlan0 $oltCvlanId  -vlan1 $oltCvlanId1 -vlan2 $oltCvlanId2 -vlan3 $oltCvlanId3 \
-vlan4 $oltCvlanId4 -vlan5 $oltCvlanId5 -vlan6 $oltCvlanId6 -vlan7 $oltCvlanId7 \
-rate0 18750  \
-rate1 6250  \
-forwardMix0 " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
                -forwardValue {100 200 0 100} } \
                {-streamNO {1 2 3 } -tsStreamNO {1 2 3 } -checktype pps \
                -forwardValue {1 2 1} } \
                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps \
                -forwardValue {1 2 4} } \
            " \
-forwardMix1 " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
                -forwardValue {100 200 0 100} } \
                {-streamNO {1 2 3 } -tsStreamNO {1 2 3 } -checktype pps \
                -forwardValue {1 2 1} } \
                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps \
                -forwardValue {1 8 32} } \
            " \
-forwardMixAgain " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
	                -forwardValue {100 200 0 100} } \
	                {-streamNO {2 } -tsStreamNO {2 } -checktype bps -forwardValue { 50 } } \
	                {-streamNO {1 3 } -tsStreamNO {1 3 } -checktype pps -forwardValue {1 1} } \
	                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps -forwardValue {1 8 32} } \
                " \
-forwardTotalBps 400 \
-otherAction " {-indexNum { [expr $pre_qid0 + 1] [expr $pre_qid0 + 2] [expr $pre_qid0 + 3] \
                            [expr $pre_qid0 + 13] [expr $pre_qid0 + 14] [expr $pre_qid0 + 15] } \
                 -pir_wgt  { 2 4 2 2 4 8   } \
                 -schrule_sel  { 0 0 0 0 0 0 } \
               } \
               {-indexNum { [expr $pre_qid0 + 13] [expr $pre_qid0 + 14] [expr $pre_qid0 + 15] } \
                 -pir_wgt  { 1 8 32   } \
                 -schrule_sel  { 0 0 0  } \
               } \
            " \
-sendStreamAgain "TRUE" \
-speedPercentAgain 75 \
-repeatCountAgain {10 10 5 10    10 10 10 10} \
,

2, QOS_03_220,  IasGlobal/AsicQOSTc, 二次入队_调度_SP+WRR 部分流拥塞, $chipVersionQosT$execNetWorkQos0$caseLevel0, \
-egr $up_port_num -adj 16 \
-vlan0 $oltCvlanId  -vlan1 $oltCvlanId1 -vlan2 $oltCvlanId2 -vlan3 $oltCvlanId3 \
-vlan4 $oltCvlanId4 -vlan5 $oltCvlanId5 -vlan6 $oltCvlanId6 -vlan7 $oltCvlanId7 \
-rate0 18750  \
-rate1 6250  \
-forwardMix0 " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
                -forwardValue {100 200 0 100} } \
                {-streamNO {1 2 3 } -tsStreamNO {1 2 3 } -checktype pps \
                -forwardValue {1 2 1} } \
                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps \
                -forwardValue {1 2 4} } \
            " \
-forwardMix1 " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
                -forwardValue {100 200 0 100} } \
                {-streamNO {1 2 3 } -tsStreamNO {1 2 3 } -checktype pps \
                -forwardValue {1 2 1} } \
                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps \
                -forwardValue {1 8 32} } \
            " \
-forwardMixAgain " {-streamNO {{0} {1 2 3} {4} {5 6 7} } -tsStreamNO {{0} {1 2 3} {4} {5 6 7} } -checktype totalBps \
	                -forwardValue {100 200 0 100} } \
	                {-streamNO {2 } -tsStreamNO {2 } -checktype bps -forwardValue { 50 } } \
	                {-streamNO {1 3 } -tsStreamNO {1 3 } -checktype pps -forwardValue {1 1} } \
	                {-streamNO {5 6 7 } -tsStreamNO {5 6 7 } -checktype pps -forwardValue {1 8 32} } \
                " \
-forwardTotalBps 400 \
-otherAction " {-indexNum { [expr $pre_qid0 + 1] [expr $pre_qid0 + 2] [expr $pre_qid0 + 3] \
                            [expr $pre_qid0 + 13] [expr $pre_qid0 + 14] [expr $pre_qid0 + 15] } \
                 -pir_wgt  { 1 2 1 1 2 4   } \
                 -schrule_sel  { 0 0 0 0 0 0 } \
               } \
               {-indexNum { [expr $pre_qid0 + 13] [expr $pre_qid0 + 14] [expr $pre_qid0 + 15] } \
                 -pir_wgt  { 1 8 32   } \
                 -schrule_sel  { 0 0 0  } \
               } \
            " \
-sendStreamAgain "TRUE" \
-speedPercentAgain 75 \
-repeatCountAgain {10 10 5 10    10 10 10 10} \
,

#差异点：5116 sts表需要配置为两倍，保持与sdk配置一致，已知逻辑问题；5116 DRR需要配置gssa表；
#         5118 sts表配置为一倍，测试逻辑问题是否解决；5118 DRR需要配置队列sts表；


.txt
#逻辑编号:
逻辑名称:逻辑端口直接挂队列_DRR调度_H
逻辑说明:
组网编号: 
预置条件:
测试步骤:

0010. 清除统计信息:
    CntAllClr (-TermName $term3);

0020. 清除所有队列统计:
     QosQueueCntAllClr (-TermName $term3); 
     
0030. 清除ont本地arl表:
	 L2MacAllDel (-TermName $term3);

0040 配置TCONT绑定模板:
	IasOntLineProfileAdd (-TermName $term1  -OntLineProfileType gpon  -ProfileId $ontLineProfileId); 
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId0  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId1  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId2  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId3  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId4  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId5  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId6  -DbaProfileId $dbaProfileId2);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId7  -DbaProfileId $dbaProfileId2);
 	
0050 删除单个广播用户:
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId1 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId2 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId3 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId4 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId5 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId6 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId7 );

0055 IFC删除:
    IfcDelExt (-TermName $term3 -begin 0xffff -end 0xffff );

0060 添加单个广播用户:
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId -user_vlan $oltCvlanId -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId1 -user_vlan $oltCvlanId1 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId2 -user_vlan $oltCvlanId2 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId3 -user_vlan $oltCvlanId3 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId4 -user_vlan $oltCvlanId4 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId5 -user_vlan $oltCvlanId5 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId6 -user_vlan $oltCvlanId6 -egr $Data(egr));
 	L2BcSet (-TermName $term3 -vlan $oltCvlanId7 -user_vlan $oltCvlanId7 -egr $Data(egr));

    
0070. 配置预调度所挂队列-仅使用sdk命令行挂调度结构，调度模式和权重直接写表项实现: 
    func_qos_presch_create(-TermName $term3 -id 0);
    func_qos_presch_create(-TermName $term3 -id 1);
    
	
0080 修改队列间的调度关系:
 	QosGssaTableSet (-TermName $term3 -index $geneschestruc(secdqueue0) -schrule_sel 0 \
 	                 -input0_gnum 0  -input1_gnum 1  -input2_gnum 1  -input3_gnum 1 -input4_gnum 2 \
 	                 -input5_gnum 7  -input6_gnum 7  -input7_gnum 7  -input8_gnum 7 \
 	                 -input9_gnum 7  -input10_gnum 7 -input11_gnum 7 -input12_gnum 7 \
 	                 -input13_gnum 7 -input14_gnum 7 -input15_gnum 7 );
  	QosGssaTableSet (-TermName $term3 -index $geneschestruc(secdqueue1) -schrule_sel 0 \
 	                 -input0_gnum 1  -input1_gnum 1  -input2_gnum 1  -input3_gnum 7 -input4_gnum 7 \
 	                 -input5_gnum 7  -input6_gnum 7  -input7_gnum 7  -input8_gnum 7 \
 	                 -input9_gnum 7  -input10_gnum 7 -input11_gnum 7 -input12_gnum 7 \
 	                 -input13_gnum 7 -input14_gnum 7 -input15_gnum 7 );
 	                 
 0130 配置队列adj:   
    QosQsctTableSet (-TermName $term3 -index $pre_qid0  -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 1] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 2] -qshp_adj $Data(adj)); 
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 3] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 4] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 5] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 6] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 7] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 8] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 9] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 10] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 11] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 12] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 13] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 14] -qshp_adj $Data(adj));
    QosQsctTableSet (-TermName $term3 -index [expr $pre_qid0 + 15] -qshp_adj $Data(adj));


0100 配置预调度的调度器shaper:
     QosShtTableSet (-TermName $term3 -index 1 -xir $Data(rate0) -xbs 15625);
     QosSsctTableSet (-TermName $term3 -index $geneschestruc(secdqueue0) -pir_shp_mnum 1 -sshp_mode 0);
     QosShtTableSet (-TermName $term3 -index 2 -xir $Data(rate1) -xbs 15625);
     QosSsctTableSet (-TermName $term3 -index $geneschestruc(secdqueue1) -pir_shp_mnum 2 -sshp_mode 0);



0120 配置预调度队列入队映射表,即配置qmap表:
    GponMapSfcSet(-TermName $term3 -sfc_id 0 -pre_sch_en 1 -valid 1 -pre_sch 0);
    GponMapSfcSet(-TermName $term3 -sfc_id 1 -pre_sch_en 1 -valid 1 -pre_sch 0);
    GponMapSfcSet(-TermName $term3 -sfc_id 2 -pre_sch_en 1 -valid 1 -pre_sch 0);
    GponMapSfcSet(-TermName $term3 -sfc_id 3 -pre_sch_en 1 -valid 1 -pre_sch 0);
    GponMapSfcSet(-TermName $term3 -sfc_id 4 -pre_sch_en 1 -valid 1 -pre_sch 0);
    GponMapSfcSet(-TermName $term3 -sfc_id 5 -pre_sch_en 1 -valid 1 -pre_sch 1);
    GponMapSfcSet(-TermName $term3 -sfc_id 6 -pre_sch_en 1 -valid 1 -pre_sch 1);
    GponMapSfcSet(-TermName $term3 -sfc_id 7 -pre_sch_en 1 -valid 1 -pre_sch 1);
	AsicCurCfgGet (-TermName $term3 );
	
075 往测试队列发送报文:
    QosCheckOtherActionStremMixData (-TermName $term3 -TsuID $tsuID -StreamSum $streamSum -Speed $speedPercent  \
	                    -SendPort $sendPort -StaPort $staPort -StatMode $statMode \
	                    -Vlan "$Data(vlan0) $Data(vlan1) $Data(vlan2) $Data(vlan3) $Data(vlan4) $Data(vlan5) $Data(vlan6) $Data(vlan7) " \
	                    -Pri $port5_vlanPri -SMac $port5_sourceMAC -DMac $port5_destinationMAC \
                        -SampleTimes $sampleTimes -PktLenList $pktLenList \
                        -SaveCfgFile $saveCfgtoFile -StaItem $statItem \
                        -StatIteStopStream $statIteStopStream \
						-AllowError $allowErrorQOSbps \
						-ForwardMix0 $Data(forwardMix0) \
						-ForwardMix1 $Data(forwardMix1) \
						-ForwardTotalBps $Data(forwardTotalBps) \
						-OtherAction $Data(otherAction) \
                        -SendStreamAgain $Data(sendStreamAgain) \
                        -SpeedPercentAgain $Data(speedPercentAgain) \
                        -RepeatCountAgain $Data(repeatCountAgain) \
                        -ForwardMixAgain $Data(forwardMixAgain) \
                        -AllowErrorFittery $allowErrorFittery \
                        );

资源释放：

010 延迟一段时间:
    IasCommonDelay( -Time $waitTime);

110 恢复TCONT绑定模板:
	IasOntLineProfileAdd (-TermName $term1  -OntLineProfileType gpon  -ProfileId $ontLineProfileId);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId1  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId2  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId3  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId4  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId5  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId6  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId7  -DbaProfileId $dbaProfileId1);
	IasNewModeOntTcontBind (-TermName $term1  -ProfileId $ontLineProfileId  -TcontId $tcontId0  -DbaProfileId $dbaProfileId);

120 删除单个广播用户:
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId1 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId2 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId3 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId4 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId5 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId6 );
 	L2BcAllDel (-TermName $term3 -vlan $oltCvlanId7 );


140 恢复队列间的调度关系:
 	QosGssaTableSet (-TermName $term3 -index $geneschestruc(secdqueue0) -schrule_sel 0 -input0_gnum 7 \
 	-input1_gnum 6 -input2_gnum 5 -input3_gnum 4 -input4_gnum 3 -input5_gnum 2 -input6_gnum 1 -input7_gnum 0);
 	QosGssaTableSet (-TermName $term3 -index $geneschestruc(secdqueue1) -schrule_sel 0 -input0_gnum 7 \
 	-input1_gnum 6 -input2_gnum 5 -input3_gnum 4 -input4_gnum 3 -input5_gnum 2 -input6_gnum 1 -input7_gnum 0);
 	
150 恢复调度模式为WRR:
    QosStsQueueTableSet (-TermName $term3 -index $pre_qid0 -pir_wgt 0 -schrule_sel 0;
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 1] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 2] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 3] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 4] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 5] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 6] -pir_wgt 0 -schrule_sel 0);
    QosStsQueueTableSet (-TermName $term3 -index [expr $pre_qid0 + 7] -pir_wgt 0 -schrule_sel 0);

160 删除预调度的调度器shaper:
     QosSsctTableSet (-TermName $term3 -index $geneschestruc(secdqueue0) -pir_shp_mnum 0 -sshp_mode 0);
     QosSsctTableSet (-TermName $term3 -index $geneschestruc(secdqueue1) -pir_shp_mnum 0 -sshp_mode 0);
    
  
            
234.停流:
    QosTsuRemoveStream (-TsuID $tsuID);
    AsicCurCfgGet (-TermName $term3 );
    
    
